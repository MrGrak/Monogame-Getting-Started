

monogame guide todo



left align all images. they do not need to be centered.
also, we are redoing to direction in prep for a late summer launch.

Intro To Monogame
1. installing and running monogame
2. adding textures, fonts, classes (loading content)
3. adding mouse, keyboard, gamepad input
4. adding music, soundfx (sfx instances only)

Intro To 2D Game Design
Codebase Study - Pong
1. making pong, and understanding game feedback
2. common game systems (asset loading, physics, collisions, screens, ui, music)
3. game state, screens, screen manager

Intermediate 2D Game Design
Codebase Study - Doggo
1. making a basic platformer (physics, collisions)
2. making a basic top down (physics, collisions)
3. making a basic program ui
4. making a basic inventory ui

Advanced 2D Game Design
1. making an action gun platformer (the vlambeer)
2. making an action gun top down (the hotline)
3. making an animated program ui (astro)
4. making an animated inventory ui (tsk)

Shaders
1. what is a shader, adding a shader to project
2. kosmonaut's bloom filter (hlsl shader)
3. other various shaders

The Cookbook
1. fullscreen routines
2. input, controller and keys
3. bounding box collision system
4. platformer physics
5. top down physics

Codebase Design
1. public static classes vs singletons
2. dependency injection vs globals
3. oop vs functional vs ???
4. managers, systems, naming things
5. production vs testing (tdd)





degrees to radians
0 = 0.0 | 90 = 1.571 | 180 = 3.142 | 270 = 4.712











## ToDo
+ discuss differences between opengl, directx, uwp projects (the big 3)
+ writing systems from scratch, and why instead of using existing library
+ writing simple ui (rectangles, click state, buttons, text)
+ writing a collision system (prevent rec overlap)
+ writing a platformer physics system
+ writing a top down physics system
+ writing a game menu system (inventory screen)
+ writing a particle system (using a pool, cursor ui)
+ writing a music player for looped bkg music
+ writing a music player for non-looped bkg music

## Making An Action Platformer - The Vlambeer Example
+ basic example (platformer, enemy, input, gun shoots bullets, enemy death)
+ basic animations and sound (jump anim, walk anim, moving hair, shooting sfx, jump sfx)
+ lower enemy hp + better enemy animations
+ higher rate of fire on gun (only way player can interact with world)
+ more enemies (more world interaction)
+ bigger bullets, muzzle flash, faster bullets (easier to read action)
+ less accurate bullets, impact effects (wall impact sprites)
+ enemy hit animation + knockback (white flash)
+ permanence (enemy corpses stay on ground)
+ 2d camera, lerping and camera movement
+ camera peeking, centering on action
+ screenshake - enemy hit, gun shooting
+ player knockback 
+ sleep, slow motion player death
+ strafing (walking backwards while shooting)
+ more permanence - bullet casings
+ more bullets x3, random enemy death explosions
+ more enemies, faster enemies
+ camera kickback opposite direction of gun firing
+ smoke particles added for enemy explosions
+ player death, slow motion, game over game state

## Improvements
+ improve fullscreen article to handle rendering fullscreen at ultra wide resolutions

## Timing Tests - should be diff repo/section in site
+ create timing test for drawing sprites (at various sizes - 16, 32, 64, 128)
+ create timing test for drawing vector and bitmap fonts
+ create timing test for drawing rectangles
+ create timing test for drawing to RenderTarget2D
